// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RallyBuilder.DataAccess;

#nullable disable

namespace RallyBuilder.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    partial class ApplicationDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2b1dc6d9-01e3-4e2f-8e37-bd5f59949f6d",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "fd2c0fbf-063b-4f11-9a33-60f993ebb223",
                            Name = "Dommer",
                            NormalizedName = "DOMMER"
                        },
                        new
                        {
                            Id = "774150f1-64f3-41e3-b634-9ed412dd0e22",
                            Name = "Instruktør",
                            NormalizedName = "INSTRUKTØR"
                        },
                        new
                        {
                            Id = "e6ce3858-625a-4ff8-8061-d9d22e67e4c0",
                            Name = "Hundefører",
                            NormalizedName = "HUNDEFØRER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "6253e240-f04d-4dc0-81c8-9726e145221c",
                            RoleId = "2b1dc6d9-01e3-4e2f-8e37-bd5f59949f6d"
                        },
                        new
                        {
                            UserId = "e57fc725-7672-4e47-bfbf-58f9cbf8ca69",
                            RoleId = "fd2c0fbf-063b-4f11-9a33-60f993ebb223"
                        },
                        new
                        {
                            UserId = "a7174963-6b35-4c04-8133-a45abf4914d8",
                            RoleId = "774150f1-64f3-41e3-b634-9ed412dd0e22"
                        },
                        new
                        {
                            UserId = "96b6c59d-64f3-4513-bd3f-6f4b905a52a6",
                            RoleId = "e6ce3858-625a-4ff8-8061-d9d22e67e4c0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RallyBuilder.Models.CourseModel", b =>
                {
                    b.Property<int>("CourseModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseModelId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("CourseModelId");

                    b.ToTable("CourseModels");
                });

            modelBuilder.Entity("RallyBuilder.Models.CourseSignEntry", b =>
                {
                    b.Property<int>("CourseSignEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseSignEntryId"));

                    b.Property<int>("CourseModelId")
                        .HasColumnType("int");

                    b.Property<int>("SignModelId")
                        .HasColumnType("int");

                    b.Property<int?>("SignNumberOnCourse")
                        .HasColumnType("int");

                    b.Property<int>("SquareNumber")
                        .HasColumnType("int");

                    b.HasKey("CourseSignEntryId");

                    b.HasIndex("CourseModelId");

                    b.HasIndex("SignModelId");

                    b.ToTable("CourseSignEntries");
                });

            modelBuilder.Entity("RallyBuilder.Models.SignModel", b =>
                {
                    b.Property<int>("SignModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SignModelId"));

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("SignModelId");

                    b.ToTable("SignModels");
                });

            modelBuilder.Entity("RallyBuilder.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "6253e240-f04d-4dc0-81c8-9726e145221c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "318708c9-154e-48a8-9d4b-e3aa3cba9bd6",
                            Email = "administrator@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@TEST.COM",
                            NormalizedUserName = "ADMINISTRATOR@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAOjvuHHp6r0ksl9t3/MeY5VCi0prJ5YBdsU9jl2LhQmHWKdtc8lTNCQye1gENqnGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f46c078-30a9-4f2a-936d-780560a6ba17",
                            TwoFactorEnabled = false,
                            UserName = "administrator@test.com",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "f90773b9-8145-4df2-851f-644b60eb5fc7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f0f97e3-4822-42ac-b8b3-d9d9b19022b0",
                            Email = "dommer@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMMER@TEST.COM",
                            NormalizedUserName = "DOMMER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIL6EAyMNW+x8W9ldgGXbiKvWGqTZW/DlnXwE2je6RWr4/b7I/Hxe/igIa1sESlTfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7876432-ecf0-49a5-8d19-135676394496",
                            TwoFactorEnabled = false,
                            UserName = "dommer@test.com",
                            Name = "Dommer"
                        },
                        new
                        {
                            Id = "02a3c053-4dc6-4792-a5a6-c9cc4f866d7b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f337beb3-9d0a-4269-baa0-d7b2ca2abf17",
                            Email = "instruktør@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUKTØR@TEST.COM",
                            NormalizedUserName = "INSTRUKTØR@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBLfAxYewXm9jZ2/1wycU0GXN7FIB4H9tiwTGreQwntNpWc691fUuJQjcQda0v/Qqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b330981-30d4-483f-921e-dbd3aeda9c39",
                            TwoFactorEnabled = false,
                            UserName = "instruktør@test.com",
                            Name = "Instruktør"
                        },
                        new
                        {
                            Id = "84e4f980-2ca8-4b62-a792-050e0dc0c60c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c19c33a-53f3-4221-8f11-c9feb6473297",
                            Email = "hundefører@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUNDEFØRER@TEST.COM",
                            NormalizedUserName = "HUNDEFØRER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMWZSZN82weRnc95z7IuUoUjbTWg2hjv0pPvmoLfMuP7XNVYf91gYPfIKEDqT1tBiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27a2500c-a9b7-4fe5-a1fb-128c850eb48b",
                            TwoFactorEnabled = false,
                            UserName = "hundefører@test.com",
                            Name = "Hundefører"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RallyBuilder.Models.CourseSignEntry", b =>
                {
                    b.HasOne("RallyBuilder.Models.CourseModel", null)
                        .WithMany("CourseSignEntries")
                        .HasForeignKey("CourseModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RallyBuilder.Models.SignModel", "SignModel")
                        .WithMany()
                        .HasForeignKey("SignModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignModel");
                });

            modelBuilder.Entity("RallyBuilder.Models.CourseModel", b =>
                {
                    b.Navigation("CourseSignEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
