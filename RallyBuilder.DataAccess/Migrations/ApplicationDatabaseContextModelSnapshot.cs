// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RallyBuilder.DataAccess;

#nullable disable

namespace RallyBuilder.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    partial class ApplicationDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4297dc45-9415-4a96-81ae-ca476e1ab04e",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "73e2dc24-d9b0-43e3-923a-673e06f56218",
                            Name = "Dommer",
                            NormalizedName = "DOMMER"
                        },
                        new
                        {
                            Id = "9fb7ad05-271f-445f-bbf9-43a7855b8086",
                            Name = "Instruktør",
                            NormalizedName = "INSTRUKTØR"
                        },
                        new
                        {
                            Id = "8cc8938b-ce7b-4092-83bc-88649bbaaec3",
                            Name = "Hundefører",
                            NormalizedName = "HUNDEFØRER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8f8be20c-d345-4561-8cc6-e55df62478aa",
                            RoleId = "4297dc45-9415-4a96-81ae-ca476e1ab04e"
                        },
                        new
                        {
                            UserId = "0b3da8c6-91dc-4e5a-a07e-f5c549f8f3c5",
                            RoleId = "73e2dc24-d9b0-43e3-923a-673e06f56218"
                        },
                        new
                        {
                            UserId = "3c0ef874-90ee-4a2c-880f-a7bc6a3414f4",
                            RoleId = "9fb7ad05-271f-445f-bbf9-43a7855b8086"
                        },
                        new
                        {
                            UserId = "21a297dd-a832-4895-866a-5726f2699094",
                            RoleId = "8cc8938b-ce7b-4092-83bc-88649bbaaec3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RallyBuilder.Models.CourseModel", b =>
                {
                    b.Property<int>("CourseModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CourseModelId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("CourseModelId");

                    b.ToTable("CourseModels");
                });

            modelBuilder.Entity("RallyBuilder.Models.CourseSignEntry", b =>
                {
                    b.Property<int>("CourseSignEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CourseSignEntryId"));

                    b.Property<int>("CourseModelId")
                        .HasColumnType("int");

                    b.Property<int>("SignModelId")
                        .HasColumnType("int");

                    b.Property<int?>("SignNumberOnCourse")
                        .HasColumnType("int");

                    b.Property<int>("SquareNumber")
                        .HasColumnType("int");

                    b.HasKey("CourseSignEntryId");

                    b.HasIndex("CourseModelId");

                    b.HasIndex("SignModelId");

                    b.ToTable("CourseSignEntries");
                });

            modelBuilder.Entity("RallyBuilder.Models.SignModel", b =>
                {
                    b.Property<int>("SignModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SignModelId"));

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("SignModelId");

                    b.ToTable("SignModels");
                });

            modelBuilder.Entity("RallyBuilder.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "8f8be20c-d345-4561-8cc6-e55df62478aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cce7fb20-9bf1-4904-ac8b-dde9f462518c",
                            Email = "administrator@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@TEST.COM",
                            NormalizedUserName = "ADMINISTRATOR@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEHAtwDDGn2lOb9Eqya1aexvkY2Ci9prcY7RBuAV44+D7lFdlfQTMMWBHFDkyRKRYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5710ce12-7b4a-4feb-8e63-6ec9ba6d6b13",
                            TwoFactorEnabled = false,
                            UserName = "administrator@test.com",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "0b3da8c6-91dc-4e5a-a07e-f5c549f8f3c5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66233997-7174-4cfe-8e45-4f34d9cdc137",
                            Email = "dommer@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMMER@TEST.COM",
                            NormalizedUserName = "DOMMER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF8v4ZpGHm004rCmPl8jadr5B4RimE84gb9VjcZXxOqeEEYv/LBPbeucy7M1fQWgTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7424981-b4a1-4079-8ced-9d840b3c4214",
                            TwoFactorEnabled = false,
                            UserName = "dommer@test.com",
                            Name = "Dommer"
                        },
                        new
                        {
                            Id = "3c0ef874-90ee-4a2c-880f-a7bc6a3414f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b061724-088c-457b-963e-ebeb08a2bdce",
                            Email = "instruktør@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUKTØR@TEST.COM",
                            NormalizedUserName = "INSTRUKTØR@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEwj2zSRQ28IusV7Fmp8/hQIjqSYOWC64JFZVjtgtJPA9HJPX7TLsR3Bies3cZ5djA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0705719-c913-4975-8ca2-31106d07a09c",
                            TwoFactorEnabled = false,
                            UserName = "instruktør@test.com",
                            Name = "Instruktør"
                        },
                        new
                        {
                            Id = "21a297dd-a832-4895-866a-5726f2699094",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "022a39dd-02da-400c-b245-bb983b1b4996",
                            Email = "hundefører@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUNDEFØRER@TEST.COM",
                            NormalizedUserName = "HUNDEFØRER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGlUkdklEIHjzvizaeMrTqnXIkj6sAXjVBXdZnUDdc/7NOvvn0EzmGwTcuG4Kk2tsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59b9dbce-96cb-4348-8bd6-c0a6133af5e4",
                            TwoFactorEnabled = false,
                            UserName = "hundefører@test.com",
                            Name = "Hundefører"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RallyBuilder.Models.CourseSignEntry", b =>
                {
                    b.HasOne("RallyBuilder.Models.CourseModel", null)
                        .WithMany("CourseSignEntries")
                        .HasForeignKey("CourseModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RallyBuilder.Models.SignModel", "SignModel")
                        .WithMany()
                        .HasForeignKey("SignModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignModel");
                });

            modelBuilder.Entity("RallyBuilder.Models.CourseModel", b =>
                {
                    b.Navigation("CourseSignEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
